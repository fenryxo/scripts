#!/bin/bash -eu

# I usually run scripts in the European Union compliance mode (-eu).
# All errors and usage of undefined variables terminate the script.
#
# Author: Jiří Janoušek <janousek.jiri@gmail.com>
#
# To the extent possible under law, author has waived all
# copyright and related or neighboring rights to this script.
# http://creativecommons.org/publicdomain/zero/1.0/
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


usage()
{

  [ $# = 1 ] || echo "$2" && echo

   echo "dropboxconflicts: search for Dropbox conflicts and help to resolve them

Usage:

  dropboxconflicts -h|--help

   - show this help

  dropboxconflicts ACTION [OPTIONS]
  
   - perform action with options

Actions:

  -s|--search    search for conflicts
  -r|--resolve   help to resolve conflicts

Options:

  --find [DROPBOX_DIR]

    Use tool find to find conflicts, default method. Up-to-date results,
    but very slow. DROPBOX_DIR is a path to your Dropbox directory,
    the default value is ~/Dropbox.

  --mlocate [DBPATH]

    Use tool mlocate to find conflict. Very fast, but you must keep
    your mlocate database up-to-date. DBPATH is a path to a mlocate
    database to use. See 'man mlocate' for the default value.
"
  exit $1
}

[ $# != 0 ] || usage 1 "Error: Not enough arguments."

case $1 in
-h|--help)
  usage 0
  ;;
-s|--search)
  ACTION="search"
  ;;
-r|--resolve)
  ACTION="resolve"
  ;;
*)
  usage 2 "Error: Unknown action: $1"
  ;;
esac
shift || true

OPT_MLOCATE=0
DROPBOX_DIR=~/Dropbox
MLOCATEDB=""

while [ $# != 0 ]; do
  case $1 in
  --mlocate)
	OPT_MLOCATE=1
	if [ $# != 1 ]; then
	  [ -f "$2" ] || usage 3 "Error: $2 is not a file."
	  MLOCATEDB="--database=$2"
	  shift
	fi
	;;
  --find)
	OPT_MLOCATE=0
	if [ $# != 1 ]; then
	  [ -d "$2" ] || usage 3 "Error: $2 is not a directory."
	  DROPBOX_DIR="$2"
	  shift
	fi
	;;
  *)
	usage 2 "Unknown argument $1"
	;;
  esac
  shift || true
done

find_conflicts()
{
  if [ $OPT_MLOCATE = 1 ]; then
	mlocate $MLOCATEDB -eb "*conflicted copy*"
	mlocate $MLOCATEDB -eb "*Case Conflict*"
  else
	find -L "$DROPBOX_DIR" \
	\( -name "*conflicted copy*" -o -name "*Case Conflict*" \) \
	-print
  fi
}

resolve_conflicts()
{
  IFS="
"
  for F2 in $1; do
	F1="$(echo $F2 | sed 's/ ([^(]*\(conflicted copy\|Case Conflict\)[^(]*)\(\.[^(]\+\)\?$/\2/')"
	do_action "$F1" "$F2"
	echo "----------------------"
	echo
  done
  echo "Done"
}

do_action()
{
  F1="$1"
  F2="$2"

  echo "*** File 1 (the current file) ***"
  if [ -e "$F1" ]; then
	ls -ld "$F1"
  else
	echo "Not found: $F1"
  fi
  echo
  echo "*** File 2 (the conflicted file) ***"
  if [ -e "$F2" ]; then
    ls -ld "$F2"
  else
	echo "Not found: $F2"
  fi
  echo
  read -p "*** What to do? ***
1: Backup the current file (F1) and use the conflicted file (F2) instead.
2: Replace the current file (F1) with the conflicted file (F2).
3: Replace a conflict mark of the conflicted file (F2) with ~~.
4: Show diff and ask again.
5: Go to shell and ask again.
9: Remove the conflicted file (F2).
*: Do nothing and continue. " -n 1
  echo
  echo
  case "$REPLY" in
  1)
	mv -fv "$F1" "${F1}~~" &&  mv -v "$F2" "$F1"
	;;
  2)
	mv -fv "$F2" "$F1"
	;;
  3)
	mv -fv "$F2" "${F1}~~"
	;;
  9)
	if [ -d "$F2" ]; then
	  echo "Actually, F2 is a directory and you should look at it."
	  do_action "$F1" "$F2"
	else
	  rm -v "$F2"
	fi
	;;
  4)
	cd "$(dirname "$F1")"
	colordiff --tabsize=4 -u "$(basename "$F1")"  "$(basename "$F2")" | less -R
	echo
	do_action "$F1" "$F2"
	;;
  5)
	cd "$(dirname "$F1")"
	bash || echo "Warning: Shell returned non-zero status."
	echo
	do_action "$F1" "$F2"
	;;
  *)
	echo "Conflict ignored."
	;;
  esac
  echo
}

case $ACTION in
search)
  find_conflicts
  ;;
resolve)
  resolve_conflicts "$(find_conflicts)"
  ;;
*)
  usage 9 "Error: Unknown action: $ACTION"
  ;;
esac
